service: campaigns-module-hg

useDotenv: true


provider:
  timeout: 900
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  architecture: x86_64
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
    table_transaction_name: CampaignTransaction
    user_transaction_name: CampaignUser
    FRONT_URL: ${env:FRONT_URL}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: !GetAtt CampaignTransaction.Arn
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: !Join [ "/", [ !GetAtt CampaignTransaction.Arn, "index/*"] ]
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"

constructs:
    quote-message-queue:
        type: queue
        worker:
            handler: lambdas/sendEmail/handler.sendEmail
            timeout: 7
            package:
              patterns:
                - "lambdas/sendEmail/handler.py"
  
plugins:
  - serverless-dotenv-plugin
  - serverless-ignore
  - serverless-python-requirements
  - serverless-dynamodb
  - serverless-offline
  - serverless-lift
package:
  individually: true
  patterns:
    - "!*/**"
    - "!**"
  exclude:
    - .env/**

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
  pythonRequirements:
    dockerizePip: false
    pipCmdExtraArgs: ['--platform manylinux2014_x86_64', '--only-binary=:all:']
    # dockerImage: public.ecr.aws/sam/build-python3.8:latest-arm64
    # dockerRunCmdExtraArgs: [ '--platform', 'linux/arm64/v8' ]
    slim: true
    layer:
      name: FastAPI-Lambda-Function
      description: FastAPI-Lambda-Function API Layer
      compatibleRuntimes:
        - python3.8
    # useDownloadCache: true
    # useStaticCache: true


resources:
  Resources:
    CampaignTransaction:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CampaignTransaction
        AttributeDefinitions:
          - AttributeName: Title
            AttributeType: S
          - AttributeName: Uid
            AttributeType: S
          - AttributeName: DateTransaction
            AttributeType: S
        KeySchema:
          - AttributeName: Title
            KeyType: HASH
          - AttributeName: Uid
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: DateIndex
            KeySchema:
              - AttributeName: Title
                KeyType: HASH
              - AttributeName: DateTransaction
                KeyType: RANGE  
            Projection:
              ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    CampaignUser:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CampaignUser
        AttributeDefinitions:
          - AttributeName: Email
            AttributeType: S
          - AttributeName: Uid
            AttributeType: S
        KeySchema:
          - AttributeName: Email
            KeyType: HASH
          - AttributeName: Uid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool-campaign
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui-campaign
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

functions:
  app:
    handler: lambdas/transaction/handler-transaction.handler
    runtime: python3.8
    environment:
      STAGE: ${self:provider.stage}
      QUEUE_URL: ${construct:quote-message-queue.queueUrl}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    package:
      patterns:
        - "lambdas/transaction/**"
    events:
      - http:
          method: any
          path: /{proxy+}
          cors: true
  


